paths:
  /products/protected:
    get:
      responses:
        '200':
          description: 200 OK
      summary: ''
      description: Protected endpoint. Only accessible after authentication with MCA Service.
  '/products/image/{container}/{file}':
    get:
      responses:
        '200':
          description: 200 OK
      parameters:
        - name: container
          type: string
          required: true
          in: path
        - name: file
          type: string
          required: true
          in: path
      description: Returns the image stored in the Object Storage Service on Bluemix.
  /products:
    post:
      tags:
        - product
      summary: Create a new instance of the model and persist it into the data source.
      operationId: product.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    put:
      tags:
        - product
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: product.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    get:
      tags:
        - product
      summary: Find all instances of the model matched by filter from the data source.
      operationId: product.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/product'
      deprecated: false
  '/products/{id}/exists':
    get:
      tags:
        - product
      summary: Check whether a model instance exists in the data source.
      operationId: 'product.exists__get_products_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/products/{id}':
    head:
      tags:
        - product
      summary: Check whether a model instance exists in the data source.
      operationId: 'product.exists__head_products_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - product
      summary: Find a model instance by id from the data source.
      operationId: product.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
    delete:
      tags:
        - product
      summary: Delete a model instance by id from the data source.
      operationId: product.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - product
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: product.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/product'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  /products/findOne:
    get:
      tags:
        - product
      summary: Find first instance of the model matched by filter from the data source.
      operationId: product.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/product'
      deprecated: false
  /products/update:
    post:
      tags:
        - product
      summary: Update instances of the model matched by where from the data source.
      operationId: product.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/product'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /products/count:
    get:
      tags:
        - product
      summary: Count instances of the model matched by where from the data source.
      operationId: product.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /products/change-stream:
    post:
      tags:
        - product
      summary: Create a change stream.
      operationId: product.createChangeStream__post_products_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    get:
      tags:
        - product
      summary: Create a change stream.
      operationId: product.createChangeStream__get_products_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
definitions:
  product:
    properties:
      Name:
        type: string
      Description:
        type: string
      Rating:
        type: string
      Picture:
        type: string
      Thumbnail:
        type: string
      Price:
        type: number
        format: double
      Category:
        type: string
      id:
        type: number
        format: double
    required:
      - Name
      - Description
      - Rating
      - Picture
      - Thumbnail
      - Price
      - Category
    additionalProperties: false
  x-any:
    properties: {}
swagger: '2.0'
info:
  x-ibm-name: products
  version: 1.0.0
  title: products
  description: API
  contact:
    name: IBM Bluemix Mobile
    url: 'http://www.ibm.com/cloud-computing/bluemix/'
  license:
    name: 'Apache License, Version 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
schemes:
  - https
host: $(catalog.host)
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  gateway: micro-gateway
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)
